!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Ruby	mixin	/how the class or module is mixed in (mixin:HOW:MODULE)/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!GemSpec	g,gem	/gems/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Rake	d,directory	/directory tasks/
!_TAG_KIND_DESCRIPTION!Rake	f,File	/file tasks/
!_TAG_KIND_DESCRIPTION!Rake	m,multitask	/multi tasks/
!_TAG_KIND_DESCRIPTION!Rake	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!Rake	t,task	/tasks/
!_TAG_KIND_DESCRIPTION!Rake	x,xtask	/tasks defined with special constructor/
!_TAG_KIND_DESCRIPTION!Ruby	A,accessor	/accessors/
!_TAG_KIND_DESCRIPTION!Ruby	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!Ruby	L,library	/libraries/
!_TAG_KIND_DESCRIPTION!Ruby	S,singletonMethod	/singleton methods/
!_TAG_KIND_DESCRIPTION!Ruby	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Ruby	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Ruby	f,method	/methods/
!_TAG_KIND_DESCRIPTION!Ruby	m,module	/modules/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!GemSpec	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Rake	0.0	/current.age/
!_TAG_PARSER_VERSION!Ruby	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/adminjeremyhinkle/dev/athena_adapter/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	//
!_TAG_ROLE_DESCRIPTION!GemSpec!gem	develDep	/specifying development dependency/
!_TAG_ROLE_DESCRIPTION!GemSpec!gem	runtimeDep	/specifying runtime dependency/
!_TAG_ROLE_DESCRIPTION!Ruby!library	loaded	/loaded by "load" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	required	/loaded by "require" method/
!_TAG_ROLE_DESCRIPTION!Ruby!library	requiredRel	/loaded by "require_relative" method/
#active?	spec/athena_adapter_spec.rb	/^  describe "#active?" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#adapter_name	spec/athena_adapter_spec.rb	/^  describe "#adapter_name" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#native_database_types	spec/athena_adapter_spec.rb	/^  describe "#native_database_types" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#quote_column_name	spec/athena_adapter_spec.rb	/^  describe "#quote_column_name" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#quote_table_name	spec/athena_adapter_spec.rb	/^  describe "#quote_table_name" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#quoted_false	spec/athena_adapter_spec.rb	/^  describe "#quoted_false" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#quoted_true	spec/athena_adapter_spec.rb	/^  describe "#quoted_true" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#supports_foreign_keys?	spec/athena_adapter_spec.rb	/^  describe "#supports_foreign_keys?" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#supports_migrations?	spec/athena_adapter_spec.rb	/^  describe "#supports_migrations?" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#supports_primary_key?	spec/athena_adapter_spec.rb	/^  describe "#supports_primary_key?" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
#supports_views?	spec/athena_adapter_spec.rb	/^  describe "#supports_views?" do$/;"	d	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter
ADAPTER_NAME	lib/active_record/connection_adapters/athena_adapter.rb	/^      ADAPTER_NAME = "Athena"$/;"	C	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
AWS Configuration	README.md	/^### AWS Configuration$/;"	S	section:ActiveRecord Athena Adapter""Usage
ActiveRecord	lib/active_record/connection_adapters/athena/database_tasks.rb	/^module ActiveRecord$/;"	m
ActiveRecord	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^module ActiveRecord$/;"	m
ActiveRecord	lib/active_record/connection_adapters/athena/schema_statements.rb	/^module ActiveRecord$/;"	m
ActiveRecord	lib/active_record/connection_adapters/athena_adapter.rb	/^module ActiveRecord$/;"	m
ActiveRecord Athena Adapter	README.md	/^# ActiveRecord Athena Adapter$/;"	c
ActiveRecord.ConnectionAdapters.AthenaAdapter	spec/athena_adapter_spec.rb	/^RSpec.describe ActiveRecord::ConnectionAdapters::AthenaAdapter do$/;"	d
ActiverecordAthena	lib/activerecord_athena.rb	/^module ActiverecordAthena$/;"	m
ActiverecordAthena	lib/activerecord_athena/version.rb	/^module ActiverecordAthena$/;"	m
Athena	lib/active_record/connection_adapters/athena/database_tasks.rb	/^    module Athena$/;"	m	module:ActiveRecord.ConnectionAdapters
Athena	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^    module Athena$/;"	m	module:ActiveRecord.ConnectionAdapters
Athena	lib/active_record/connection_adapters/athena/schema_statements.rb	/^    module Athena$/;"	m	module:ActiveRecord.ConnectionAdapters
AthenaAdapter	lib/active_record/connection_adapters/athena_adapter.rb	/^    class AthenaAdapter < AbstractAdapter$/;"	c	module:ActiveRecord.ConnectionAdapters	mixin:include:Athena.SchemaStatements
Basic Usage	README.md	/^### Basic Usage$/;"	S	section:ActiveRecord Athena Adapter""Usage
Configuration	README.md	/^### Configuration$/;"	S	section:ActiveRecord Athena Adapter""Usage
ConnectionAdapters	lib/active_record/connection_adapters/athena/database_tasks.rb	/^  module ConnectionAdapters$/;"	m	module:ActiveRecord
ConnectionAdapters	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^  module ConnectionAdapters$/;"	m	module:ActiveRecord
ConnectionAdapters	lib/active_record/connection_adapters/athena/schema_statements.rb	/^  module ConnectionAdapters$/;"	m	module:ActiveRecord
ConnectionAdapters	lib/active_record/connection_adapters/athena_adapter.rb	/^  module ConnectionAdapters$/;"	m	module:ActiveRecord
Contributing	README.md	/^## Contributing$/;"	s	chapter:ActiveRecord Athena Adapter
DatabaseTasks	lib/active_record/connection_adapters/athena/database_tasks.rb	/^      class DatabaseTasks$/;"	c	module:ActiveRecord.ConnectionAdapters.Athena
Development	README.md	/^## Development$/;"	s	chapter:ActiveRecord Athena Adapter
Error	lib/activerecord_athena.rb	/^  class Error < StandardError; end$/;"	c	module:ActiverecordAthena
Installation	README.md	/^## Installation$/;"	s	chapter:ActiveRecord Athena Adapter
License	README.md	/^## License$/;"	s	chapter:ActiveRecord Athena Adapter
Limitations	README.md	/^### Limitations$/;"	S	section:ActiveRecord Athena Adapter""Usage
SchemaDumper	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^      class SchemaDumper < ConnectionAdapters::SchemaDumper$/;"	c	module:ActiveRecord.ConnectionAdapters.Athena
SchemaStatements	lib/active_record/connection_adapters/athena/schema_statements.rb	/^      module SchemaStatements$/;"	m	module:ActiveRecord.ConnectionAdapters.Athena
Supported Operations	README.md	/^### Supported Operations$/;"	S	section:ActiveRecord Athena Adapter""Usage
Usage	README.md	/^## Usage$/;"	s	chapter:ActiveRecord Athena Adapter
VERSION	lib/activerecord_athena/version.rb	/^  VERSION = "0.1.0"$/;"	C	module:ActiverecordAthena
active?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def active?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
activerecord_athena	activerecord_athena.gemspec	/^  spec.name          = "activerecord_athena"$/;"	g
adapter_name	lib/active_record/connection_adapters/athena_adapter.rb	/^      def adapter_name$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
add_column	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def add_column(table_name, column_name, type, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
add_index	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def add_index(table_name, column_name, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
change_column	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def change_column(table_name, column_name, type, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
charset	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.charset(config)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
collation	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.collation(config)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
column_exists?	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def column_exists?(table_name, column_name, type = nil, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
columns	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def columns(table_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
create	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.create(config)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
create_table	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def create_table(table_name, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
default	Rakefile	/^task default: :spec/;"	t
disconnect!	lib/active_record/connection_adapters/athena_adapter.rb	/^      def disconnect!$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
drop	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.drop(config)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
drop_table	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def drop_table(table_name, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
exec_query	lib/active_record/connection_adapters/athena_adapter.rb	/^      def exec_query(sql, name = "SQL", binds = [], prepare: false)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
execute	lib/active_record/connection_adapters/athena_adapter.rb	/^      def execute(sql, name = nil)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
execute_query	lib/active_record/connection_adapters/athena_adapter.rb	/^      def execute_query(sql)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
foreign_keys	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^        def foreign_keys(table, stream)$/;"	f	class:ActiveRecord.ConnectionAdapters.Athena.SchemaDumper
foreign_keys	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def foreign_keys(table_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
get_query_results	lib/active_record/connection_adapters/athena_adapter.rb	/^      def get_query_results(query_execution_id)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
header	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^        def header(stream)$/;"	f	class:ActiveRecord.ConnectionAdapters.Athena.SchemaDumper
indexes	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^        def indexes(table, stream)$/;"	f	class:ActiveRecord.ConnectionAdapters.Athena.SchemaDumper
indexes	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def indexes(table_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
initialize	lib/active_record/connection_adapters/athena_adapter.rb	/^      def initialize(connection, logger, connection_options, config)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
lookup_cast_type	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def lookup_cast_type(sql_type)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
native_database_types	lib/active_record/connection_adapters/athena_adapter.rb	/^      def native_database_types$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
primary_key	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def primary_key(table_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
purge	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.purge(config)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
quote_column_name	lib/active_record/connection_adapters/athena_adapter.rb	/^      def quote_column_name(name)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
quote_table_name	lib/active_record/connection_adapters/athena_adapter.rb	/^      def quote_table_name(name)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
quoted_false	lib/active_record/connection_adapters/athena_adapter.rb	/^      def quoted_false$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
quoted_true	lib/active_record/connection_adapters/athena_adapter.rb	/^      def quoted_true$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
reconnect!	lib/active_record/connection_adapters/athena_adapter.rb	/^      def reconnect!$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
remove_column	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def remove_column(table_name, column_name, type = nil, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
remove_index	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def remove_index(table_name, column_name = nil, **options)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
rename_column	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def rename_column(table_name, column_name, new_column_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
rename_table	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def rename_table(table_name, new_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
returns 'Athena'	spec/athena_adapter_spec.rb	/^    it "returns 'Athena'" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#adapter_name
returns 'false'	spec/athena_adapter_spec.rb	/^    it "returns 'false'" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#quoted_false
returns 'true'	spec/athena_adapter_spec.rb	/^    it "returns 'true'" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#quoted_true
returns Athena-specific type mappings	spec/athena_adapter_spec.rb	/^    it "returns Athena-specific type mappings" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#native_database_types
returns false	spec/athena_adapter_spec.rb	/^    it "returns false" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#supports_foreign_keys?
returns false	spec/athena_adapter_spec.rb	/^    it "returns false" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#supports_migrations?
returns false	spec/athena_adapter_spec.rb	/^    it "returns false" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#supports_primary_key?
returns true	spec/athena_adapter_spec.rb	/^    it "returns true" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#active?
returns true	spec/athena_adapter_spec.rb	/^    it "returns true" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#supports_views?
select_all	lib/active_record/connection_adapters/athena_adapter.rb	/^      def select_all(arel, name = nil, binds = [])$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
spec	Rakefile	/^RSpec::Core::RakeTask.new(:spec)$/;"	x	typeref:typename:RSpec::Core::RakeTask.new
start_query_execution	lib/active_record/connection_adapters/athena_adapter.rb	/^      def start_query_execution(sql)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
structure_dump	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.structure_dump(config, filename)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
structure_load	lib/active_record/connection_adapters/athena/database_tasks.rb	/^        def self.structure_load(config, filename)$/;"	S	class:ActiveRecord.ConnectionAdapters.Athena.DatabaseTasks
supports_bulk_alter?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_bulk_alter?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
supports_datetime_with_precision?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_datetime_with_precision?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
supports_foreign_keys?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_foreign_keys?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
supports_json?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_json?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
supports_migrations?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_migrations?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
supports_primary_key?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_primary_key?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
supports_views?	lib/active_record/connection_adapters/athena_adapter.rb	/^      def supports_views?$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
table	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^        def table(table, stream)$/;"	f	class:ActiveRecord.ConnectionAdapters.Athena.SchemaDumper
table_exists?	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def table_exists?(table_name)$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
tables	lib/active_record/connection_adapters/athena/schema_statements.rb	/^        def tables$/;"	f	module:ActiveRecord.ConnectionAdapters.Athena.SchemaStatements
to_sql	lib/active_record/connection_adapters/athena_adapter.rb	/^      def to_sql(arel, binds)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
trailer	lib/active_record/connection_adapters/athena/schema_dumper.rb	/^        def trailer(stream)$/;"	f	class:ActiveRecord.ConnectionAdapters.Athena.SchemaDumper
wait_for_query_completion	lib/active_record/connection_adapters/athena_adapter.rb	/^      def wait_for_query_completion(query_execution_id)$/;"	f	class:ActiveRecord.ConnectionAdapters.AthenaAdapter
wraps column names in backticks	spec/athena_adapter_spec.rb	/^    it "wraps column names in backticks" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#quote_column_name
wraps table names in backticks	spec/athena_adapter_spec.rb	/^    it "wraps table names in backticks" do$/;"	i	describe:ActiveRecord.ConnectionAdapters.AthenaAdapter.#quote_table_name
